

public class MyClass {
	
	
	public static void main(String args[]){
		// ============================================================================
		//
		// Copyright (c) 2006-2015, Talend Inc.
		//
		// This source code has been automatically generated by_Talend Open Studio for Big Data
		// / Licensed under the Apache License, Version 2.0 (the "License");
		// you may not use this file except in compliance with the License.
		// You may obtain a copy of the License at
		// http://www.apache.org/licenses/LICENSE-2.0
		// 
		// Unless required by applicable law or agreed to in writing, software
		// distributed under the License is distributed on an "AS IS" BASIS,
		// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		// See the License for the specific language governing permissions and
		// limitations under the License.
		
		package beproject.trans1_0_1;
		
		import routines.Numeric;
		import routines.DataOperation;
		import routines.TalendDataGenerator;
		import routines.TalendString;
		import routines.StringHandling;
		import routines.Relational;
		import routines.TalendDate;
		import routines.Mathematical;
		import routines.system.*;
		import routines.system.api.*;
		import java.text.ParseException;
		import java.text.SimpleDateFormat;
		import java.util.Date;
		import java.util.List;
		import java.math.BigDecimal;
		import java.io.ByteArrayOutputStream;
		import java.io.ByteArrayInputStream;
		import java.io.DataInputStream;
		import java.io.DataOutputStream;
		import java.io.ObjectOutputStream;
		import java.io.ObjectInputStream;
		import java.io.IOException;
		import java.util.Comparator;
		
		@SuppressWarnings("unused")
		/**
		 * Job: Trans1 Purpose: <br>
		 * Description:  <br>
		 * @author user@talend.com
		 * @version 6.0.1.20150908_1633
		 * @status 
		 */
		public class Trans1 implements TalendJob {
		
			public final Object obj = new Object();
		
			// for transmiting parameters purpose
			private Object valueObject = null;
		
			public Object getValueObject() {
				return this.valueObject;
			}
		
			public void setValueObject(Object valueObject) {
				this.valueObject = valueObject;
			}
		
			private final static String defaultCharset = java.nio.charset.Charset
					.defaultCharset().name();
		
			private final static String utf8Charset = "UTF-8";
		
			// create and load default properties
			private java.util.Properties defaultProps = new java.util.Properties();
		
			// create application properties with default
			public class ContextProperties extends java.util.Properties {
		
				private static final long serialVersionUID = 1L;
		
				public ContextProperties(java.util.Properties properties) {
					super(properties);
				}
		
				public ContextProperties() {
					super();
				}
		
				public void synchronizeContext() {
		
				}
		
			}
		
			private ContextProperties context = new ContextProperties();
		
			public ContextProperties getContext() {
				return this.context;
			}
		
			private final String jobVersion = "0.1";
			private final String jobName = "Trans1";
			private final String projectName = "BEPROJECT";
			public Integer errorCode = null;
			private String currentComponent = "";
		
			private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
			private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
		
			private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
			private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
			private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
			public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
		
			public boolean isExportedAsOSGI = false;
		
			// OSGi DataSource
			private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
		
			public void setDataSources(
					java.util.Map<String, javax.sql.DataSource> dataSources) {
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
						.entrySet()) {
					talendDataSources.put(
							dataSourceEntry.getKey(),
							new routines.system.TalendDataSource(dataSourceEntry
									.getValue()));
				}
				globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
			}
		
			private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
			private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
					new java.io.BufferedOutputStream(baos));
		
			public String getExceptionStackTrace() {
				if ("failure".equals(this.getStatus())) {
					errorMessagePS.flush();
					return baos.toString();
				}
				return null;
			}
		
			private Exception exception;
		
			public Exception getException() {
				if ("failure".equals(this.getStatus())) {
					return this.exception;
				}
				return null;
			}
		
			private class TalendException extends Exception {
		
				private static final long serialVersionUID = 1L;
		
				private java.util.Map<String, Object> globalMap = null;
				private Exception e = null;
				private String currentComponent = null;
				private String virtualComponentName = null;
		
				public void setVirtualComponentName(String virtualComponentName) {
					this.virtualComponentName = virtualComponentName;
				}
		
				private TalendException(Exception e, String errorComponent,
						final java.util.Map<String, Object> globalMap) {
					this.currentComponent = errorComponent;
					this.globalMap = globalMap;
					this.e = e;
				}
		
				public Exception getException() {
					return this.e;
				}
		
				public String getCurrentComponent() {
					return this.currentComponent;
				}
		
				public String getExceptionCauseMessage(Exception e) {
					Throwable cause = e;
					String message = null;
					int i = 10;
					while (null != cause && 0 < i--) {
						message = cause.getMessage();
						if (null == message) {
							cause = cause.getCause();
						} else {
							break;
						}
					}
					if (null == message) {
						message = e.getClass().getName();
					}
					return message;
				}
		
				@Override
				public void printStackTrace() {
					if (!(e instanceof TalendException || e instanceof TDieException)) {
						if (virtualComponentName != null
								&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
							globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
									getExceptionCauseMessage(e));
						}
						globalMap.put(currentComponent + "_ERROR_MESSAGE",
								getExceptionCauseMessage(e));
						System.err
								.println("Exception in component " + currentComponent);
					}
					if (!(e instanceof TDieException)) {
						if (e instanceof TalendException) {
							e.printStackTrace();
						} else {
							e.printStackTrace();
							e.printStackTrace(errorMessagePS);
							Trans1.this.exception = e;
						}
					}
					if (!(e instanceof TalendException)) {
						try {
							for (java.lang.reflect.Method m : this.getClass()
									.getEnclosingClass().getMethods()) {
								if (m.getName().compareTo(currentComponent + "_error") == 0) {
									m.invoke(Trans1.this, new Object[] { e,
											currentComponent, globalMap });
									break;
								}
							}
		
							if (!(e instanceof TDieException)) {
							}
						} catch (Exception e) {
							this.e.printStackTrace();
						}
					}
				}
			}
		
			public void tFileInputExcel_1_error(Exception exception,
					String errorComponent, final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tMap_1_error(Exception exception, String errorComponent,
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tFilterRow_1_error(Exception exception, String errorComponent,
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tReplace_1_error(Exception exception, String errorComponent,
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tMap_2_error(Exception exception, String errorComponent,
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tLogRow_1_error(Exception exception, String errorComponent,
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tMongoDBOutput_1_error(Exception exception,
					String errorComponent, final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tAggregateRow_2_AGGOUT_error(Exception exception,
					String errorComponent, final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
		
			}
		
			public void tAggregateRow_2_AGGIN_error(Exception exception,
					String errorComponent, final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				end_Hash.put(errorComponent, System.currentTimeMillis());
		
				status = "failure";
		
				tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
		
			public void tFileInputExcel_1_onSubJobError(Exception exception,
					String errorComponent, final java.util.Map<String, Object> globalMap)
					throws TalendException {
		
				resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
						.currentThread().getId() + "", "FATAL", "",
						exception.getMessage(),
						ResumeUtil.getExceptionStackTrace(exception), "");
		
			}
		
			public static class row5Struct implements
					routines.system.IPersistableRow<row5Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				public Integer SR;
		
				public Integer getSR() {
					return this.SR;
				}
		
				public Integer PL;
		
				public Integer getPL() {
					return this.PL;
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Date = readDate(dis);
		
							this.SR = readInteger(dis);
		
							this.PL = readInteger(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
						// Integer
		
						writeInteger(this.SR, dos);
		
						// Integer
		
						writeInteger(this.PL, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Date=" + String.valueOf(Date));
					sb.append(",SR=" + String.valueOf(SR));
					sb.append(",PL=" + String.valueOf(PL));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(row5Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class row4Struct implements
					routines.system.IPersistableRow<row4Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				public Integer SR;
		
				public Integer getSR() {
					return this.SR;
				}
		
				public Integer PL;
		
				public Integer getPL() {
					return this.PL;
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Date = readDate(dis);
		
							this.SR = readInteger(dis);
		
							this.PL = readInteger(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
						// Integer
		
						writeInteger(this.SR, dos);
		
						// Integer
		
						writeInteger(this.PL, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Date=" + String.valueOf(Date));
					sb.append(",SR=" + String.valueOf(SR));
					sb.append(",PL=" + String.valueOf(PL));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(row4Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class OnRowsEndStructtAggregateRow_2 implements
					routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				public Integer SR;
		
				public Integer getSR() {
					return this.SR;
				}
		
				public Integer PL;
		
				public Integer getPL() {
					return this.PL;
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Date = readDate(dis);
		
							this.SR = readInteger(dis);
		
							this.PL = readInteger(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
						// Integer
		
						writeInteger(this.SR, dos);
		
						// Integer
		
						writeInteger(this.PL, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Date=" + String.valueOf(Date));
					sb.append(",SR=" + String.valueOf(SR));
					sb.append(",PL=" + String.valueOf(PL));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(OnRowsEndStructtAggregateRow_2 other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class out1Struct implements
					routines.system.IPersistableRow<out1Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				public Integer SR;
		
				public Integer getSR() {
					return this.SR;
				}
		
				public Integer PL;
		
				public Integer getPL() {
					return this.PL;
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Date = readDate(dis);
		
							this.SR = readInteger(dis);
		
							this.PL = readInteger(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
						// Integer
		
						writeInteger(this.SR, dos);
		
						// Integer
		
						writeInteger(this.PL, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Date=" + String.valueOf(Date));
					sb.append(",SR=" + String.valueOf(SR));
					sb.append(",PL=" + String.valueOf(PL));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(out1Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class row3Struct implements
					routines.system.IPersistableRow<row3Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public String Page;
		
				public String getPage() {
					return this.Page;
				}
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				private String readString(ObjectInputStream dis) throws IOException {
					String strReturn = null;
					int length = 0;
					length = dis.readInt();
					if (length == -1) {
						strReturn = null;
					} else {
						if (length > commonByteArray_BEPROJECT_Trans1.length) {
							if (length < 1024
									&& commonByteArray_BEPROJECT_Trans1.length == 0) {
								commonByteArray_BEPROJECT_Trans1 = new byte[1024];
							} else {
								commonByteArray_BEPROJECT_Trans1 = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray_BEPROJECT_Trans1, 0, length);
						strReturn = new String(commonByteArray_BEPROJECT_Trans1, 0,
								length, utf8Charset);
					}
					return strReturn;
				}
		
				private void writeString(String str, ObjectOutputStream dos)
						throws IOException {
					if (str == null) {
						dos.writeInt(-1);
					} else {
						byte[] byteArray = str.getBytes(utf8Charset);
						dos.writeInt(byteArray.length);
						dos.write(byteArray);
					}
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Page = readString(dis);
		
							this.Date = readDate(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// String
		
						writeString(this.Page, dos);
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Page=" + Page);
					sb.append(",Date=" + String.valueOf(Date));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(row3Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class row2Struct implements
					routines.system.IPersistableRow<row2Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public String Page;
		
				public String getPage() {
					return this.Page;
				}
		
				public Integer Pageviews;
		
				public Integer getPageviews() {
					return this.Pageviews;
				}
		
				public Integer Unique_Pageviews;
		
				public Integer getUnique_Pageviews() {
					return this.Unique_Pageviews;
				}
		
				public Float Avg__Time_on_Page;
		
				public Float getAvg__Time_on_Page() {
					return this.Avg__Time_on_Page;
				}
		
				public Integer Entrances;
		
				public Integer getEntrances() {
					return this.Entrances;
				}
		
				public Float Bounce_Rate;
		
				public Float getBounce_Rate() {
					return this.Bounce_Rate;
				}
		
				public Float __Exit;
		
				public Float get__Exit() {
					return this.__Exit;
				}
		
				public Float Page_Value;
		
				public Float getPage_Value() {
					return this.Page_Value;
				}
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				private String readString(ObjectInputStream dis) throws IOException {
					String strReturn = null;
					int length = 0;
					length = dis.readInt();
					if (length == -1) {
						strReturn = null;
					} else {
						if (length > commonByteArray_BEPROJECT_Trans1.length) {
							if (length < 1024
									&& commonByteArray_BEPROJECT_Trans1.length == 0) {
								commonByteArray_BEPROJECT_Trans1 = new byte[1024];
							} else {
								commonByteArray_BEPROJECT_Trans1 = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray_BEPROJECT_Trans1, 0, length);
						strReturn = new String(commonByteArray_BEPROJECT_Trans1, 0,
								length, utf8Charset);
					}
					return strReturn;
				}
		
				private void writeString(String str, ObjectOutputStream dos)
						throws IOException {
					if (str == null) {
						dos.writeInt(-1);
					} else {
						byte[] byteArray = str.getBytes(utf8Charset);
						dos.writeInt(byteArray.length);
						dos.write(byteArray);
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Page = readString(dis);
		
							this.Pageviews = readInteger(dis);
		
							this.Unique_Pageviews = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Avg__Time_on_Page = null;
							} else {
								this.Avg__Time_on_Page = dis.readFloat();
							}
		
							this.Entrances = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Bounce_Rate = null;
							} else {
								this.Bounce_Rate = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.__Exit = null;
							} else {
								this.__Exit = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.Page_Value = null;
							} else {
								this.Page_Value = dis.readFloat();
							}
		
							this.Date = readDate(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// String
		
						writeString(this.Page, dos);
		
						// Integer
		
						writeInteger(this.Pageviews, dos);
		
						// Integer
		
						writeInteger(this.Unique_Pageviews, dos);
		
						// Float
		
						if (this.Avg__Time_on_Page == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Avg__Time_on_Page);
						}
		
						// Integer
		
						writeInteger(this.Entrances, dos);
		
						// Float
		
						if (this.Bounce_Rate == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Bounce_Rate);
						}
		
						// Float
		
						if (this.__Exit == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.__Exit);
						}
		
						// Float
		
						if (this.Page_Value == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Page_Value);
						}
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Page=" + Page);
					sb.append(",Pageviews=" + String.valueOf(Pageviews));
					sb.append(",Unique_Pageviews=" + String.valueOf(Unique_Pageviews));
					sb.append(",Avg__Time_on_Page=" + String.valueOf(Avg__Time_on_Page));
					sb.append(",Entrances=" + String.valueOf(Entrances));
					sb.append(",Bounce_Rate=" + String.valueOf(Bounce_Rate));
					sb.append(",__Exit=" + String.valueOf(__Exit));
					sb.append(",Page_Value=" + String.valueOf(Page_Value));
					sb.append(",Date=" + String.valueOf(Date));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(row2Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class out2Struct implements
					routines.system.IPersistableRow<out2Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public String Page;
		
				public String getPage() {
					return this.Page;
				}
		
				public Integer Pageviews;
		
				public Integer getPageviews() {
					return this.Pageviews;
				}
		
				public Integer Unique_Pageviews;
		
				public Integer getUnique_Pageviews() {
					return this.Unique_Pageviews;
				}
		
				public Float Avg__Time_on_Page;
		
				public Float getAvg__Time_on_Page() {
					return this.Avg__Time_on_Page;
				}
		
				public Integer Entrances;
		
				public Integer getEntrances() {
					return this.Entrances;
				}
		
				public Float Bounce_Rate;
		
				public Float getBounce_Rate() {
					return this.Bounce_Rate;
				}
		
				public Float __Exit;
		
				public Float get__Exit() {
					return this.__Exit;
				}
		
				public Float Page_Value;
		
				public Float getPage_Value() {
					return this.Page_Value;
				}
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				private String readString(ObjectInputStream dis) throws IOException {
					String strReturn = null;
					int length = 0;
					length = dis.readInt();
					if (length == -1) {
						strReturn = null;
					} else {
						if (length > commonByteArray_BEPROJECT_Trans1.length) {
							if (length < 1024
									&& commonByteArray_BEPROJECT_Trans1.length == 0) {
								commonByteArray_BEPROJECT_Trans1 = new byte[1024];
							} else {
								commonByteArray_BEPROJECT_Trans1 = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray_BEPROJECT_Trans1, 0, length);
						strReturn = new String(commonByteArray_BEPROJECT_Trans1, 0,
								length, utf8Charset);
					}
					return strReturn;
				}
		
				private void writeString(String str, ObjectOutputStream dos)
						throws IOException {
					if (str == null) {
						dos.writeInt(-1);
					} else {
						byte[] byteArray = str.getBytes(utf8Charset);
						dos.writeInt(byteArray.length);
						dos.write(byteArray);
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Page = readString(dis);
		
							this.Pageviews = readInteger(dis);
		
							this.Unique_Pageviews = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Avg__Time_on_Page = null;
							} else {
								this.Avg__Time_on_Page = dis.readFloat();
							}
		
							this.Entrances = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Bounce_Rate = null;
							} else {
								this.Bounce_Rate = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.__Exit = null;
							} else {
								this.__Exit = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.Page_Value = null;
							} else {
								this.Page_Value = dis.readFloat();
							}
		
							this.Date = readDate(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// String
		
						writeString(this.Page, dos);
		
						// Integer
		
						writeInteger(this.Pageviews, dos);
		
						// Integer
		
						writeInteger(this.Unique_Pageviews, dos);
		
						// Float
		
						if (this.Avg__Time_on_Page == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Avg__Time_on_Page);
						}
		
						// Integer
		
						writeInteger(this.Entrances, dos);
		
						// Float
		
						if (this.Bounce_Rate == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Bounce_Rate);
						}
		
						// Float
		
						if (this.__Exit == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.__Exit);
						}
		
						// Float
		
						if (this.Page_Value == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Page_Value);
						}
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Page=" + Page);
					sb.append(",Pageviews=" + String.valueOf(Pageviews));
					sb.append(",Unique_Pageviews=" + String.valueOf(Unique_Pageviews));
					sb.append(",Avg__Time_on_Page=" + String.valueOf(Avg__Time_on_Page));
					sb.append(",Entrances=" + String.valueOf(Entrances));
					sb.append(",Bounce_Rate=" + String.valueOf(Bounce_Rate));
					sb.append(",__Exit=" + String.valueOf(__Exit));
					sb.append(",Page_Value=" + String.valueOf(Page_Value));
					sb.append(",Date=" + String.valueOf(Date));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(out2Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public static class row1Struct implements
					routines.system.IPersistableRow<row1Struct> {
				final static byte[] commonByteArrayLock_BEPROJECT_Trans1 = new byte[0];
				static byte[] commonByteArray_BEPROJECT_Trans1 = new byte[0];
		
				public String Page;
		
				public String getPage() {
					return this.Page;
				}
		
				public Integer Pageviews;
		
				public Integer getPageviews() {
					return this.Pageviews;
				}
		
				public Integer Unique_Pageviews;
		
				public Integer getUnique_Pageviews() {
					return this.Unique_Pageviews;
				}
		
				public Float Avg__Time_on_Page;
		
				public Float getAvg__Time_on_Page() {
					return this.Avg__Time_on_Page;
				}
		
				public Integer Entrances;
		
				public Integer getEntrances() {
					return this.Entrances;
				}
		
				public Float Bounce_Rate;
		
				public Float getBounce_Rate() {
					return this.Bounce_Rate;
				}
		
				public Float __Exit;
		
				public Float get__Exit() {
					return this.__Exit;
				}
		
				public Float Page_Value;
		
				public Float getPage_Value() {
					return this.Page_Value;
				}
		
				public java.util.Date Date;
		
				public java.util.Date getDate() {
					return this.Date;
				}
		
				private String readString(ObjectInputStream dis) throws IOException {
					String strReturn = null;
					int length = 0;
					length = dis.readInt();
					if (length == -1) {
						strReturn = null;
					} else {
						if (length > commonByteArray_BEPROJECT_Trans1.length) {
							if (length < 1024
									&& commonByteArray_BEPROJECT_Trans1.length == 0) {
								commonByteArray_BEPROJECT_Trans1 = new byte[1024];
							} else {
								commonByteArray_BEPROJECT_Trans1 = new byte[2 * length];
							}
						}
						dis.readFully(commonByteArray_BEPROJECT_Trans1, 0, length);
						strReturn = new String(commonByteArray_BEPROJECT_Trans1, 0,
								length, utf8Charset);
					}
					return strReturn;
				}
		
				private void writeString(String str, ObjectOutputStream dos)
						throws IOException {
					if (str == null) {
						dos.writeInt(-1);
					} else {
						byte[] byteArray = str.getBytes(utf8Charset);
						dos.writeInt(byteArray.length);
						dos.write(byteArray);
					}
				}
		
				private Integer readInteger(ObjectInputStream dis) throws IOException {
					Integer intReturn;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						intReturn = null;
					} else {
						intReturn = dis.readInt();
					}
					return intReturn;
				}
		
				private void writeInteger(Integer intNum, ObjectOutputStream dos)
						throws IOException {
					if (intNum == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeInt(intNum);
					}
				}
		
				private java.util.Date readDate(ObjectInputStream dis)
						throws IOException {
					java.util.Date dateReturn = null;
					int length = 0;
					length = dis.readByte();
					if (length == -1) {
						dateReturn = null;
					} else {
						dateReturn = new Date(dis.readLong());
					}
					return dateReturn;
				}
		
				private void writeDate(java.util.Date date1, ObjectOutputStream dos)
						throws IOException {
					if (date1 == null) {
						dos.writeByte(-1);
					} else {
						dos.writeByte(0);
						dos.writeLong(date1.getTime());
					}
				}
		
				public void readData(ObjectInputStream dis) {
		
					synchronized (commonByteArrayLock_BEPROJECT_Trans1) {
		
						try {
		
							int length = 0;
		
							this.Page = readString(dis);
		
							this.Pageviews = readInteger(dis);
		
							this.Unique_Pageviews = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Avg__Time_on_Page = null;
							} else {
								this.Avg__Time_on_Page = dis.readFloat();
							}
		
							this.Entrances = readInteger(dis);
		
							length = dis.readByte();
							if (length == -1) {
								this.Bounce_Rate = null;
							} else {
								this.Bounce_Rate = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.__Exit = null;
							} else {
								this.__Exit = dis.readFloat();
							}
		
							length = dis.readByte();
							if (length == -1) {
								this.Page_Value = null;
							} else {
								this.Page_Value = dis.readFloat();
							}
		
							this.Date = readDate(dis);
		
						} catch (IOException e) {
							throw new RuntimeException(e);
		
						}
		
					}
		
				}
		
				public void writeData(ObjectOutputStream dos) {
					try {
		
						// String
		
						writeString(this.Page, dos);
		
						// Integer
		
						writeInteger(this.Pageviews, dos);
		
						// Integer
		
						writeInteger(this.Unique_Pageviews, dos);
		
						// Float
		
						if (this.Avg__Time_on_Page == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Avg__Time_on_Page);
						}
		
						// Integer
		
						writeInteger(this.Entrances, dos);
		
						// Float
		
						if (this.Bounce_Rate == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Bounce_Rate);
						}
		
						// Float
		
						if (this.__Exit == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.__Exit);
						}
		
						// Float
		
						if (this.Page_Value == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeFloat(this.Page_Value);
						}
		
						// java.util.Date
		
						writeDate(this.Date, dos);
		
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
		
				}
		
				public String toString() {
		
					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");
					sb.append("Page=" + Page);
					sb.append(",Pageviews=" + String.valueOf(Pageviews));
					sb.append(",Unique_Pageviews=" + String.valueOf(Unique_Pageviews));
					sb.append(",Avg__Time_on_Page=" + String.valueOf(Avg__Time_on_Page));
					sb.append(",Entrances=" + String.valueOf(Entrances));
					sb.append(",Bounce_Rate=" + String.valueOf(Bounce_Rate));
					sb.append(",__Exit=" + String.valueOf(__Exit));
					sb.append(",Page_Value=" + String.valueOf(Page_Value));
					sb.append(",Date=" + String.valueOf(Date));
					sb.append("]");
		
					return sb.toString();
				}
		
				/**
				 * Compare keys
				 */
				public int compareTo(row1Struct other) {
		
					int returnValue = -1;
		
					return returnValue;
				}
		
				private int checkNullsAndCompare(Object object1, Object object2) {
					int returnValue = 0;
					if (object1 instanceof Comparable && object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}
		
					return returnValue;
				}
		
				private int compareStrings(String string1, String string2) {
					return string1.compareTo(string2);
				}
		
			}
		
			public void tFileInputExcel_1Process(
					final java.util.Map<String, Object> globalMap)
					throws TalendException {
				globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);
		
				final boolean execStat = this.execStat;
				String currentVirtualComponent = null;
		
				String iterateId = "";
		
				String currentComponent = "";
				java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();
		
				try {
		
					String currentMethodName = new java.lang.Exception()
							.getStackTrace()[0].getMethodName();
					boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
					if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																							// the
																							// resume
						globalResumeTicket = true;
		
						row1Struct row1 = new row1Struct();
						out2Struct out2 = new out2Struct();
						row2Struct row2 = new row2Struct();
						row3Struct row3 = new row3Struct();
						out1Struct out1 = new out1Struct();
						row4Struct row4 = new row4Struct();
						row4Struct row5 = row4;
		
						/**
						 * [tAggregateRow_2_AGGOUT begin ] start
						 */
		
						ok_Hash.put("tAggregateRow_2_AGGOUT", false);
						start_Hash.put("tAggregateRow_2_AGGOUT",
								System.currentTimeMillis());
		
						currentVirtualComponent = "tAggregateRow_2";
		
						currentComponent = "tAggregateRow_2_AGGOUT";
		
						int tos_count_tAggregateRow_2_AGGOUT = 0;
		
						// ------------
		
						java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();
		
						// ------------
		
						class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144
		
							public double sd(Double[] data) {
								final int n = data.length;
								if (n < 2) {
									return Double.NaN;
								}
								double d1 = 0d;
								double d2 = 0d;
		
								for (int i = 0; i < data.length; i++) {
									d1 += (data[i] * data[i]);
									d2 += data[i];
								}
		
								return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
							}
		
							public void checkedIADD(byte a, byte b,
									boolean checkTypeOverFlow, boolean checkUlp) {
								byte r = (byte) (a + b);
								if (checkTypeOverFlow && ((a 		 r) & (b 		 r)) < 0) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'short/Short'", "'int/Integer'"));
								}
							}
		
							public void checkedIADD(short a, short b,
									boolean checkTypeOverFlow, boolean checkUlp) {
								short r = (short) (a + b);
								if (checkTypeOverFlow && ((a 		 r) & (b 		 r)) < 0) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'int/Integer'", "'short/Short'"));
								}
							}
		
							public void checkedIADD(int a, int b,
									boolean checkTypeOverFlow, boolean checkUlp) {
								int r = a + b;
								if (checkTypeOverFlow && ((a 		 r) & (b 		 r)) < 0) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'long/Long'", "'int/Integer'"));
								}
							}
		
							public void checkedIADD(long a, long b,
									boolean checkTypeOverFlow, boolean checkUlp) {
								long r = a + b;
								if (checkTypeOverFlow && ((a 		 r) & (b 		 r)) < 0) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'long/Long'"));
								}
							}
		
							public void checkedIADD(float a, float b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkUlp) {
									float minAddedValue = Math.ulp(a);
									if (minAddedValue > Math.abs(b)) {
										throw new RuntimeException(
												buildPrecisionMessage(
														String.valueOf(a),
														String.valueOf(b),
														"'double' or 'BigDecimal'",
														"'float/Float'"));
									}
								}
		
								if (checkTypeOverFlow
										&& ((double) a + (double) b > (double) Float.MAX_VALUE)
										|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
									throw new RuntimeException(
											buildOverflowMessage(String.valueOf(a),
													String.valueOf(b),
													"'double' or 'BigDecimal'",
													"'float/Float'"));
								}
							}
		
							public void checkedIADD(double a, double b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkUlp) {
									double minAddedValue = Math.ulp(a);
									if (minAddedValue > Math.abs(b)) {
										throw new RuntimeException(
												buildPrecisionMessage(
														String.valueOf(a),
														String.valueOf(a),
														"'BigDecimal'",
														"'double/Double'"));
									}
								}
		
								if (checkTypeOverFlow
										&& (a + b > (double) Double.MAX_VALUE)
										|| (a + b < -Double.MAX_VALUE)) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'double/Double'"));
								}
							}
		
							public void checkedIADD(double a, byte b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkTypeOverFlow
										&& (a + b > (double) Double.MAX_VALUE)
										|| (a + b < -Double.MAX_VALUE)) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'double/Double'"));
								}
							}
		
							public void checkedIADD(double a, short b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkTypeOverFlow
										&& (a + b > (double) Double.MAX_VALUE)
										|| (a + b < -Double.MAX_VALUE)) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'double/Double'"));
								}
							}
		
							public void checkedIADD(double a, int b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkTypeOverFlow
										&& (a + b > (double) Double.MAX_VALUE)
										|| (a + b < -Double.MAX_VALUE)) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'double/Double'"));
								}
							}
		
							public void checkedIADD(double a, float b,
									boolean checkTypeOverFlow, boolean checkUlp) {
		
								if (checkUlp) {
									double minAddedValue = Math.ulp(a);
									if (minAddedValue > Math.abs(b)) {
										throw new RuntimeException(
												buildPrecisionMessage(
														String.valueOf(a),
														String.valueOf(a),
														"'BigDecimal'",
														"'double/Double'"));
									}
								}
		
								if (checkTypeOverFlow
										&& (a + b > (double) Double.MAX_VALUE)
										|| (a + b < -Double.MAX_VALUE)) {
									throw new RuntimeException(buildOverflowMessage(
											String.valueOf(a), String.valueOf(b),
											"'BigDecimal'", "'double/Double'"));
								}
							}
		
							private String buildOverflowMessage(String a, String b,
									String advicedTypes, String originalType) {
								return "Type overflow when adding "
										+ b
										+ " to "
										+ a
										+ ", to resolve this problem, increase the precision by using "
										+ advicedTypes + " type in place of "
										+ originalType + ".";
							}
		
							private String buildPrecisionMessage(String a, String b,
									String advicedTypes, String originalType) {
								return "The double precision is unsufficient to add the value "
										+ b
										+ " to "
										+ a
										+ ", to resolve this problem, increase the precision by using "
										+ advicedTypes
										+ " type in place of "
										+ originalType + ".";
							}
		
						} // G_OutBegin_AggR_144
		
						UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();
		
						class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100
		
							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;
		
							java.util.Date Date;
							Integer SR_sum;
							Integer PL_sum;
		
							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;
		
									result = prime
											* result
											+ ((this.Date == null) ? 0 : this.Date
													.hashCode());
		
									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}
		
							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
		
								if (this.Date == null) {
									if (other.Date != null)
										return false;
								} else if (!this.Date.equals(other.Date))
									return false;
		
								return true;
							}
		
						} // G_OutBegin_AggR_100
		
						AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
						AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
						java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();
		
						/**
						 * [tAggregateRow_2_AGGOUT begin ] stop
						 */
		
						/**
						 * [tMap_2 begin ] start
						 */
		
						ok_Hash.put("tMap_2", false);
						start_Hash.put("tMap_2", System.currentTimeMillis());
		
						currentComponent = "tMap_2";
		
						int tos_count_tMap_2 = 0;
		
						// ###############################
						// # Lookup's keys initialization
						// ###############################
		
						// ###############################
						// # Vars initialization
						class Var__tMap_2__Struct {
						}
						Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
						// ###############################
		
						// ###############################
						// # Outputs initialization
						out1Struct out1_tmp = new out1Struct();
						// ###############################
		
						/**
						 * [tMap_2 begin ] stop
						 */
		
						/**
						 * [tReplace_1 begin ] start
						 */
		
						ok_Hash.put("tReplace_1", false);
						start_Hash.put("tReplace_1", System.currentTimeMillis());
		
						currentComponent = "tReplace_1";
		
						int tos_count_tReplace_1 = 0;
		
						int nb_line_tReplace_1 = 0;
		
						/**
						 * [tReplace_1 begin ] stop
						 */
		
						/**
						 * [tFilterRow_1 begin ] start
						 */
		
						ok_Hash.put("tFilterRow_1", false);
						start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
						currentComponent = "tFilterRow_1";
		
						int tos_count_tFilterRow_1 = 0;
		
						int nb_line_tFilterRow_1 = 0;
						int nb_line_ok_tFilterRow_1 = 0;
						int nb_line_reject_tFilterRow_1 = 0;
		
						class Operator_tFilterRow_1 {
							private String sErrorMsg = "";
							private boolean bMatchFlag = true;
							private String sUnionFlag = "&&";
		
							public Operator_tFilterRow_1(String unionFlag) {
								sUnionFlag = unionFlag;
								bMatchFlag = "||".equals(unionFlag) ? false : true;
							}
		
							public String getErrorMsg() {
								if (sErrorMsg != null && sErrorMsg.length() > 1)
									return sErrorMsg.substring(1);
								else
									return null;
							}
		
							public boolean getMatchFlag() {
								return bMatchFlag;
							}
		
							public void matches(boolean partMatched, String reason) {
								// no need to care about the next judgement
								if ("||".equals(sUnionFlag) && bMatchFlag) {
									return;
								}
		
								if (!partMatched) {
									sErrorMsg += "|" + reason;
								}
		
								if ("||".equals(sUnionFlag))
									bMatchFlag = bMatchFlag || partMatched;
								else
									bMatchFlag = bMatchFlag && partMatched;
							}
						}
		
						/**
						 * [tFilterRow_1 begin ] stop
						 */
		
						/**
						 * [tMap_1 begin ] start
						 */
		
						ok_Hash.put("tMap_1", false);
						start_Hash.put("tMap_1", System.currentTimeMillis());
		
						currentComponent = "tMap_1";
		
						int tos_count_tMap_1 = 0;
		
						// ###############################
						// # Lookup's keys initialization
						// ###############################
		
						// ###############################
						// # Vars initialization
						class Var__tMap_1__Struct {
						}
						Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
						// ###############################
		
						// ###############################
						// # Outputs initialization
						out2Struct out2_tmp = new out2Struct();
						// ###############################
		
						/**
						 * [tMap_1 begin ] stop
						 */
		
						/**
						 * [tFileInputExcel_1 begin ] start
						 */
		
						ok_Hash.put("tFileInputExcel_1", false);
						start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
						currentComponent = "tFileInputExcel_1";
		
						int tos_count_tFileInputExcel_1 = 0;
		
						class RegexUtil_tFileInputExcel_1 {
		
							public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
									org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
									String oneSheetName, boolean useRegex) {
		
								java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		
								if (useRegex) {// this part process the regex issue
		
									java.util.regex.Pattern pattern = java.util.regex.Pattern
											.compile(oneSheetName);
									for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
										String sheetName = sheet.getSheetName();
										java.util.regex.Matcher matcher = pattern
												.matcher(sheetName);
										if (matcher.matches()) {
											if (sheet != null) {
												list.add(sheet);
											}
										}
									}
		
								} else {
									org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
											.getSheet(oneSheetName);
									if (sheet != null) {
										list.add(sheet);
									}
		
								}
		
								return list;
							}
		
							public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
									org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
									int index, boolean useRegex) {
								java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
								org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
										.getSheetAt(index);
								if (sheet != null) {
									list.add(sheet);
								}
								return list;
							}
		
						}
						RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
		
						Object source_tFileInputExcel_1 = "C:/Users/Divyansh/Desktop/File2/Pages.xlsx";
						org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;
		
						if (source_tFileInputExcel_1 instanceof String) {
							workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
									(String) source_tFileInputExcel_1);
						} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
							workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
									(java.io.InputStream) source_tFileInputExcel_1);
						} else {
							workbook_tFileInputExcel_1 = null;
							throw new java.lang.Exception(
									"The data source should be specified as Inputstream or File Path!");
						}
						try {
		
							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
							sheetList_tFileInputExcel_1
									.addAll(regexUtil_tFileInputExcel_1.getSheets(
											workbook_tFileInputExcel_1, "Dataset1",
											false));
							if (sheetList_tFileInputExcel_1.size() <= 0) {
								throw new RuntimeException("Special sheets not exist!");
							}
		
							java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
							for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
								if (sheet_FilterNull_tFileInputExcel_1 != null
										&& sheetList_FilterNull_tFileInputExcel_1
												.iterator() != null
										&& sheet_FilterNull_tFileInputExcel_1
												.iterator().hasNext()) {
									sheetList_FilterNull_tFileInputExcel_1
											.add(sheet_FilterNull_tFileInputExcel_1);
								}
							}
							sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
							if (sheetList_tFileInputExcel_1.size() > 0) {
								int nb_line_tFileInputExcel_1 = 0;
		
								int begin_line_tFileInputExcel_1 = 1;
		
								int footer_input_tFileInputExcel_1 = 0;
		
								int end_line_tFileInputExcel_1 = 0;
								for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
									end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
											.getLastRowNum() + 1);
								}
								end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
								int limit_tFileInputExcel_1 = -1;
								int start_column_tFileInputExcel_1 = 1 - 1;
								int end_column_tFileInputExcel_1 = -1;
		
								org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
								org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(0);
								int rowCount_tFileInputExcel_1 = 0;
								int sheetIndex_tFileInputExcel_1 = 0;
								int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
										.get(0).getLastRowNum() + 1);
		
								// for the number format
								java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
										"#.####################################");
								char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
										.getDecimalFormatSymbols()
										.getDecimalSeparator();
		
								for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {
		
									int emptyColumnCount_tFileInputExcel_1 = 0;
		
									if (limit_tFileInputExcel_1 != -1
											&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
										break;
									}
		
									while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
											+ currentRows_tFileInputExcel_1) {
										rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
										sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
												.get(++sheetIndex_tFileInputExcel_1);
										currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
												.getLastRowNum() + 1);
									}
									globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
											sheet_tFileInputExcel_1.getSheetName());
									if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
										row_tFileInputExcel_1 = sheet_tFileInputExcel_1
												.getRow(i_tFileInputExcel_1
														- rowCount_tFileInputExcel_1);
									}
									row1 = null;
									int tempRowLength_tFileInputExcel_1 = 9;
		
									int columnIndex_tFileInputExcel_1 = 0;
		
									String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
									int excel_end_column_tFileInputExcel_1;
									if (row_tFileInputExcel_1 == null) {
										excel_end_column_tFileInputExcel_1 = 0;
									} else {
										excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
												.getLastCellNum();
									}
									int actual_end_column_tFileInputExcel_1;
									if (end_column_tFileInputExcel_1 == -1) {
										actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
									} else {
										actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
												: end_column_tFileInputExcel_1;
									}
									org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
									for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
										if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
											org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
													.getCell(i
															+ start_column_tFileInputExcel_1);
											if (cell_tFileInputExcel_1 != null) {
												switch (cell_tFileInputExcel_1
														.getCellType()) {
												case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getRichStringCellValue()
															.getString();
													break;
												case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
													if (org.apache.poi.ss.usermodel.DateUtil
															.isCellDateFormatted(cell_tFileInputExcel_1)) {
														temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
																.getDateCellValue()
																.toString();
													} else {
														temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
																.format(cell_tFileInputExcel_1
																		.getNumericCellValue());
													}
													break;
												case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
													temp_row_tFileInputExcel_1[i] = String
															.valueOf(cell_tFileInputExcel_1
																	.getBooleanCellValue());
													break;
												case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
													switch (cell_tFileInputExcel_1
															.getCachedFormulaResultType()) {
													case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
														temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
																.getRichStringCellValue()
																.getString();
														break;
													case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
														if (org.apache.poi.ss.usermodel.DateUtil
																.isCellDateFormatted(cell_tFileInputExcel_1)) {
															temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
																	.getDateCellValue()
																	.toString();
														} else {
															ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
																	cell_tFileInputExcel_1
																			.getNumericCellValue());
															temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
																	.getStringValue();
														}
														break;
													case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
														temp_row_tFileInputExcel_1[i] = String
																.valueOf(cell_tFileInputExcel_1
																		.getBooleanCellValue());
														break;
													default:
														temp_row_tFileInputExcel_1[i] = "";
													}
													break;
												default:
													temp_row_tFileInputExcel_1[i] = "";
												}
											} else {
												temp_row_tFileInputExcel_1[i] = "";
											}
		
										} else {
											temp_row_tFileInputExcel_1[i] = "";
										}
									}
									boolean whetherReject_tFileInputExcel_1 = false;
									row1 = new row1Struct();
									int curColNum_tFileInputExcel_1 = -1;
									String curColName_tFileInputExcel_1 = "";
									try {
										columnIndex_tFileInputExcel_1 = 0;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Page";
		
											row1.Page = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
										} else {
											row1.Page = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 1;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Pageviews";
		
											row1.Pageviews = ParserUtils
													.parseTo_Integer(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Pageviews = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 2;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Unique_Pageviews";
		
											row1.Unique_Pageviews = ParserUtils
													.parseTo_Integer(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Unique_Pageviews = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 3;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Avg__Time_on_Page";
		
											row1.Avg__Time_on_Page = ParserUtils
													.parseTo_Float(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Avg__Time_on_Page = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 4;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Entrances";
		
											row1.Entrances = ParserUtils
													.parseTo_Integer(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Entrances = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 5;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Bounce_Rate";
		
											row1.Bounce_Rate = ParserUtils
													.parseTo_Float(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Bounce_Rate = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 6;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "__Exit";
		
											row1.__Exit = ParserUtils
													.parseTo_Float(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.__Exit = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 7;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Page_Value";
		
											row1.Page_Value = ParserUtils
													.parseTo_Float(ParserUtils
															.parseTo_Number(
																	temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																	null,
																	'.' == decimalChar_tFileInputExcel_1 ? null
																			: decimalChar_tFileInputExcel_1));
										} else {
											row1.Page_Value = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										columnIndex_tFileInputExcel_1 = 8;
		
										if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.length() > 0) {
											curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1
													+ 1;
											curColName_tFileInputExcel_1 = "Date";
		
											if (8 < actual_end_column_tFileInputExcel_1) {
												try {
													if (row_tFileInputExcel_1
															.getCell(
																	columnIndex_tFileInputExcel_1
																			+ start_column_tFileInputExcel_1)
															.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC
															&& org.apache.poi.ss.usermodel.DateUtil
																	.isCellDateFormatted(row_tFileInputExcel_1
																			.getCell(columnIndex_tFileInputExcel_1
																					+ start_column_tFileInputExcel_1))) {
														row1.Date = row_tFileInputExcel_1
																.getCell(
																		columnIndex_tFileInputExcel_1
																				+ start_column_tFileInputExcel_1)
																.getDateCellValue();
													} else {
														java.util.Date tempDate_tFileInputExcel_1 = ParserUtils
																.parseTo_Date(
																		temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
																		"dd-MM-yyyy");
														if (tempDate_tFileInputExcel_1
																.after((new SimpleDateFormat(
																		"yyyy/MM/dd hh:mm:ss.SSS"))
																		.parse("9999/12/31 23:59:59.999"))
																|| tempDate_tFileInputExcel_1
																		.before((new SimpleDateFormat(
																				"yyyy/MM/dd"))
																				.parse("1900/01/01"))) {
															throw new RuntimeException(
																	"The cell format is not Date in ( Row. "
																			+ (nb_line_tFileInputExcel_1 + 1)
																			+ " and ColumnNum. "
																			+ curColNum_tFileInputExcel_1
																			+ " )");
														} else {
															row1.Date = tempDate_tFileInputExcel_1;
														}
													}
												} catch (java.lang.Exception e) {
		
													throw new RuntimeException(
															"The cell format is not Date in ( Row. "
																	+ (nb_line_tFileInputExcel_1 + 1)
																	+ " and ColumnNum. "
																	+ curColNum_tFileInputExcel_1
																	+ " )");
												}
											}
		
										} else {
											row1.Date = null;
											emptyColumnCount_tFileInputExcel_1++;
										}
										nb_line_tFileInputExcel_1++;
		
									} catch (java.lang.Exception e) {
										whetherReject_tFileInputExcel_1 = true;
										System.err.println(e.getMessage());
										row1 = null;
									}
		
									/**
									 * [tFileInputExcel_1 begin ] stop
									 */
		
									/**
									 * [tFileInputExcel_1 main ] start
									 */
		
									currentComponent = "tFileInputExcel_1";
		
									tos_count_tFileInputExcel_1++;
		
									/**
									 * [tFileInputExcel_1 main ] stop
									 */
									// Start of branch "row1"
									if (row1 != null) {
		
										/**
										 * [tMap_1 main ] start
										 */
		
										currentComponent = "tMap_1";
		
										boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_1 = false;
										boolean mainRowRejected_tMap_1 = false;
		
										// ###############################
										{ // start of Var scope
		
											// ###############################
											// # Vars tables
		
											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables
		
											out2 = null;
		
											// # Output table : 'out2'
											out2_tmp.Page = (row1.Page != null) ? row1.Page
													: "";
											out2_tmp.Pageviews = row1.Pageviews;
											out2_tmp.Unique_Pageviews = row1.Unique_Pageviews;
											out2_tmp.Avg__Time_on_Page = row1.Avg__Time_on_Page;
											out2_tmp.Entrances = row1.Entrances;
											out2_tmp.Bounce_Rate = row1.Bounce_Rate;
											out2_tmp.__Exit = row1.__Exit;
											out2_tmp.Page_Value = row1.Page_Value;
											out2_tmp.Date = TalendDate.addDate(
													row1.Date, 1, "dd");
											out2 = out2_tmp;
											// ###############################
		
										} // end of Var scope
		
										rejectedInnerJoin_tMap_1 = false;
		
										tos_count_tMap_1++;
		
										/**
										 * [tMap_1 main ] stop
										 */
										// Start of branch "out2"
										if (out2 != null) {
		
											/**
											 * [tFilterRow_1 main ] start
											 */
		
											currentComponent = "tFilterRow_1";
		
											row2 = null;
											Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
													"&&");
											ope_tFilterRow_1
													.matches(
															(// code sample : use out2
																// to define the
																// condition.
															// out2.columnName1.equals("foo")
															// ||!(out2.columnName2.equals("bar"))
															// replace the following
															// expression by your own
															// filter condition
															out2.Page
																	.contains("/search/cont") || out2.Page
																	.contains("/p/")),
															"advanced condition failed");
		
											if (ope_tFilterRow_1.getMatchFlag()) {
												if (row2 == null) {
													row2 = new row2Struct();
												}
												row2.Page = out2.Page;
												row2.Pageviews = out2.Pageviews;
												row2.Unique_Pageviews = out2.Unique_Pageviews;
												row2.Avg__Time_on_Page = out2.Avg__Time_on_Page;
												row2.Entrances = out2.Entrances;
												row2.Bounce_Rate = out2.Bounce_Rate;
												row2.__Exit = out2.__Exit;
												row2.Page_Value = out2.Page_Value;
												row2.Date = out2.Date;
												nb_line_ok_tFilterRow_1++;
											} else {
												nb_line_reject_tFilterRow_1++;
											}
		
											nb_line_tFilterRow_1++;
		
											tos_count_tFilterRow_1++;
		
											/**
											 * [tFilterRow_1 main ] stop
											 */
											// Start of branch "row2"
											if (row2 != null) {
		
												/**
												 * [tReplace_1 main ] start
												 */
		
												currentComponent = "tReplace_1";
		
												row2.Page = StringUtils.replaceAll(
														row2.Page,
														"		\\/search\\/controller.*",
														"SR" + "");
												row2.Page = StringUtils.replaceAll(
														row2.Page, "		\\/p/.*", "PL"
																+ "");
												row3.Page = row2.Page;
		
												row3.Date = row2.Date;
		
												nb_line_tReplace_1++;
		
												tos_count_tReplace_1++;
		
												/**
												 * [tReplace_1 main ] stop
												 */
		
												/**
												 * [tMap_2 main ] start
												 */
		
												currentComponent = "tMap_2";
		
												boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_2 = false;
												boolean mainRowRejected_tMap_2 = false;
		
												// ###############################
												{ // start of Var scope
		
													// ###############################
													// # Vars tables
		
													Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
													// ###############################
													// # Output tables
		
													out1 = null;
		
													// # Output table : 'out1'
													out1_tmp.Date = row3.Date;
													out1_tmp.SR = row3.Page
															.contains("SR") == true ? 1
															: 0;
													out1_tmp.PL = row3.Page
															.contains("PL") == true ? 1
															: 0;
													out1 = out1_tmp;
													// ###############################
		
												} // end of Var scope
		
												rejectedInnerJoin_tMap_2 = false;
		
												tos_count_tMap_2++;
		
												/**
												 * [tMap_2 main ] stop
												 */
												// Start of branch "out1"
												if (out1 != null) {
		
													/**
													 * [tAggregateRow_2_AGGOUT main ]
													 * start
													 */
		
													currentVirtualComponent = "tAggregateRow_2";
		
													currentComponent = "tAggregateRow_2_AGGOUT";
		
													operation_finder_tAggregateRow_2.Date = out1.Date;
		
													operation_finder_tAggregateRow_2.hashCodeDirty = true;
		
													operation_result_tAggregateRow_2 = hash_tAggregateRow_2
															.get(operation_finder_tAggregateRow_2);
		
													if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001
		
														operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
		
														operation_result_tAggregateRow_2.Date = operation_finder_tAggregateRow_2.Date;
		
														hash_tAggregateRow_2
																.put(operation_result_tAggregateRow_2,
																		operation_result_tAggregateRow_2);
		
													} // G_OutMain_AggR_001
		
													if (operation_result_tAggregateRow_2.SR_sum == null) {
														operation_result_tAggregateRow_2.SR_sum = (int) 0;
													}
		
													if (out1.SR != null)
														operation_result_tAggregateRow_2.SR_sum += out1.SR;
													if (operation_result_tAggregateRow_2.PL_sum == null) {
														operation_result_tAggregateRow_2.PL_sum = (int) 0;
													}
		
													if (out1.PL != null)
														operation_result_tAggregateRow_2.PL_sum += out1.PL;
		
													tos_count_tAggregateRow_2_AGGOUT++;
		
													/**
													 * [tAggregateRow_2_AGGOUT main ]
													 * stop
													 */
		
												} // End of branch "out1"
		
											} // End of branch "row2"
		
										} // End of branch "out2"
		
									} // End of branch "row1"
		
									/**
									 * [tFileInputExcel_1 end ] start
									 */
		
									currentComponent = "tFileInputExcel_1";
		
								}
		
								globalMap.put("tFileInputExcel_1_NB_LINE",
										nb_line_tFileInputExcel_1);
		
							}
		
						} finally {
		
							if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
								workbook_tFileInputExcel_1.getPackage().revert();
							}
		
						}
		
						ok_Hash.put("tFileInputExcel_1", true);
						end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
						/**
						 * [tFileInputExcel_1 end ] stop
						 */
		
						/**
						 * [tMap_1 end ] start
						 */
		
						currentComponent = "tMap_1";
		
						// ###############################
						// # Lookup hashes releasing
						// ###############################
		
						ok_Hash.put("tMap_1", true);
						end_Hash.put("tMap_1", System.currentTimeMillis());
		
						/**
						 * [tMap_1 end ] stop
						 */
		
						/**
						 * [tFilterRow_1 end ] start
						 */
		
						currentComponent = "tFilterRow_1";
		
						globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_OK",
								nb_line_ok_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_REJECT",
								nb_line_reject_tFilterRow_1);
		
						ok_Hash.put("tFilterRow_1", true);
						end_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
						/**
						 * [tFilterRow_1 end ] stop
						 */
		
						/**
						 * [tReplace_1 end ] start
						 */
		
						currentComponent = "tReplace_1";
		
						globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
		
						ok_Hash.put("tReplace_1", true);
						end_Hash.put("tReplace_1", System.currentTimeMillis());
		
						/**
						 * [tReplace_1 end ] stop
						 */
		
						/**
						 * [tMap_2 end ] start
						 */
		
						currentComponent = "tMap_2";
		
						// ###############################
						// # Lookup hashes releasing
						// ###############################
		
						ok_Hash.put("tMap_2", true);
						end_Hash.put("tMap_2", System.currentTimeMillis());
		
						/**
						 * [tMap_2 end ] stop
						 */
		
						/**
						 * [tAggregateRow_2_AGGOUT end ] start
						 */
		
						currentVirtualComponent = "tAggregateRow_2";
		
						currentComponent = "tAggregateRow_2_AGGOUT";
		
						ok_Hash.put("tAggregateRow_2_AGGOUT", true);
						end_Hash.put("tAggregateRow_2_AGGOUT",
								System.currentTimeMillis());
		
						/**
						 * [tAggregateRow_2_AGGOUT end ] stop
						 */
		
						/**
						 * [tMongoDBOutput_1 begin ] start
						 */
		
						ok_Hash.put("tMongoDBOutput_1", false);
						start_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());
		
						currentComponent = "tMongoDBOutput_1";
		
						int tos_count_tMongoDBOutput_1 = 0;
		
						int nb_line_tMongoDBOutput_1 = 0;
		
						class DBObjectUtil_tMongoDBOutput_1 {
		
							private com.mongodb.BasicDBObject object = null;
		
							// Put value to embedded document
							// If have no embedded document, put the value to root
							// document
							public void put(String parentNode, String curentName,
									Object value) {
								if (parentNode == null || "".equals(parentNode)) {
									object.put(curentName, value);
								} else {
									String objNames[] = parentNode.split("\\.");
									com.mongodb.BasicDBObject lastNode = getParentNode(
											parentNode, objNames.length - 1);
									lastNode.put(curentName, value);
									com.mongodb.BasicDBObject parenttNode = null;
									for (int i = objNames.length - 1; i >= 0; i--) {
										parenttNode = getParentNode(parentNode, i - 1);
										parenttNode.put(objNames[i], lastNode);
										lastNode = (com.mongodb.BasicDBObject) parenttNode
												.clone();
									}
									object = lastNode;
								}
							}
		
							// Get node(embedded document) by path configuration
							public com.mongodb.BasicDBObject getParentNode(
									String parentNode, int index) {
								com.mongodb.BasicDBObject basicDBObject = object;
								if (parentNode == null || "".equals(parentNode)) {
									return object;
								} else {
									String objNames[] = parentNode.split("\\.");
									for (int i = 0; i <= index; i++) {
										basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
												.get(objNames[i]);
										if (basicDBObject == null) {
											basicDBObject = new com.mongodb.BasicDBObject();
											return basicDBObject;
										}
										if (i == index) {
											break;
										}
									}
									return basicDBObject;
								}
							}
		
							public void putkeyNode(String parentNode,
									String curentName, Object value) {
								if (parentNode == null || "".equals(parentNode)
										|| ".".equals(parentNode)) {
									put(parentNode, curentName, value);
								} else {
									put("", parentNode + "." + curentName, value);
								}
							}
		
							public com.mongodb.BasicDBObject getObject() {
								return this.object;
							}
		
							public void setObject(com.mongodb.BasicDBObject object) {
								this.object = object;
							}
		
						}
						DBObjectUtil_tMongoDBOutput_1 updateObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
						DBObjectUtil_tMongoDBOutput_1 queryObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
						java.util.Map<String, String> pathMap_tMongoDBOutput_1 = new java.util.HashMap<String, String>();
						com.mongodb.Mongo mongo_tMongoDBOutput_1 = null;
						com.mongodb.DB db_tMongoDBOutput_1 = null;
		
						pathMap_tMongoDBOutput_1.put("Date", "");
		
						pathMap_tMongoDBOutput_1.put("SR", "");
		
						pathMap_tMongoDBOutput_1.put("PL", "");
		
						// Empty client options
						com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_1 = new com.mongodb.MongoClientOptions.Builder()
								.build();
						// Empty client credentials list
						java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();
		
						com.mongodb.ServerAddress serverAddress_tMongoDBOutput_1 = new com.mongodb.ServerAddress(
								"localhost", 27017);
						mongo_tMongoDBOutput_1 = new com.mongodb.MongoClient(
								serverAddress_tMongoDBOutput_1,
								mongoCredentialList_tMongoDBOutput_1,
								clientOptions_tMongoDBOutput_1);
						resourceMap.put("mongo_tMongoDBOutput_1",
								mongo_tMongoDBOutput_1);
						db_tMongoDBOutput_1 = mongo_tMongoDBOutput_1.getDB("b1");
		
						com.mongodb.DBCollection coll_tMongoDBOutput_1 = db_tMongoDBOutput_1
								.getCollection("a113");
		
						/**
						 * [tMongoDBOutput_1 begin ] stop
						 */
		
						/**
						 * [tLogRow_1 begin ] start
						 */
		
						ok_Hash.put("tLogRow_1", false);
						start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
						currentComponent = "tLogRow_1";
		
						int tos_count_tLogRow_1 = 0;
		
						// /////////////////////
		
						final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
						java.io.PrintStream consoleOut_tLogRow_1 = null;
		
						StringBuilder strBuffer_tLogRow_1 = null;
						int nb_line_tLogRow_1 = 0;
						// /////////////////////
		
						/**
						 * [tLogRow_1 begin ] stop
						 */
		
						/**
						 * [tAggregateRow_2_AGGIN begin ] start
						 */
		
						ok_Hash.put("tAggregateRow_2_AGGIN", false);
						start_Hash.put("tAggregateRow_2_AGGIN",
								System.currentTimeMillis());
		
						currentVirtualComponent = "tAggregateRow_2";
		
						currentComponent = "tAggregateRow_2_AGGIN";
		
						int tos_count_tAggregateRow_2_AGGIN = 0;
		
						java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
								.values();
		
						globalMap.put("tAggregateRow_2_NB_LINE",
								values_tAggregateRow_2.size());
		
						for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600
		
							/**
							 * [tAggregateRow_2_AGGIN begin ] stop
							 */
		
							/**
							 * [tAggregateRow_2_AGGIN main ] start
							 */
		
							currentVirtualComponent = "tAggregateRow_2";
		
							currentComponent = "tAggregateRow_2_AGGIN";
		
							row4.Date = aggregated_row_tAggregateRow_2.Date;
							row4.SR = aggregated_row_tAggregateRow_2.SR_sum;
							row4.PL = aggregated_row_tAggregateRow_2.PL_sum;
		
							tos_count_tAggregateRow_2_AGGIN++;
		
							/**
							 * [tAggregateRow_2_AGGIN main ] stop
							 */
		
							/**
							 * [tLogRow_1 main ] start
							 */
		
							currentComponent = "tLogRow_1";
		
							// /////////////////////
		
							strBuffer_tLogRow_1 = new StringBuilder();
		
							if (row4.Date != null) { //
		
								strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
										row4.Date, "yyyy-MM-dd"));
		
							} //
		
							strBuffer_tLogRow_1.append("|");
		
							if (row4.SR != null) { //
		
								strBuffer_tLogRow_1.append(String.valueOf(row4.SR));
		
							} //
		
							strBuffer_tLogRow_1.append("|");
		
							if (row4.PL != null) { //
		
								strBuffer_tLogRow_1.append(String.valueOf(row4.PL));
		
							} //
		
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(System.out));
								globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1
									.println(strBuffer_tLogRow_1.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////
		
							// ////
		
							// /////////////////////
		
							row5 = row4;
		
							tos_count_tLogRow_1++;
		
							/**
							 * [tLogRow_1 main ] stop
							 */
		
							/**
							 * [tMongoDBOutput_1 main ] start
							 */
		
							currentComponent = "tMongoDBOutput_1";
		
							com.mongodb.WriteResult resultMessage_tMongoDBOutput_1 = null;
							updateObjectUtil_tMongoDBOutput_1
									.setObject(new com.mongodb.BasicDBObject());
		
							if (row5.Date != null) {
		
								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1.get("Date"), "Date",
										row5.Date);
							}
							if (row5.SR != null) {
		
								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1.get("SR"), "SR",
										row5.SR);
							}
							if (row5.PL != null) {
		
								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1.get("PL"), "PL",
										row5.PL);
							}
							com.mongodb.BasicDBObject updateObj_tMongoDBOutput_1 = updateObjectUtil_tMongoDBOutput_1
									.getObject();
		
							resultMessage_tMongoDBOutput_1 = coll_tMongoDBOutput_1
									.insert(updateObj_tMongoDBOutput_1);
		
							nb_line_tMongoDBOutput_1++;
		
							tos_count_tMongoDBOutput_1++;
		
							/**
							 * [tMongoDBOutput_1 main ] stop
							 */
		
							/**
							 * [tAggregateRow_2_AGGIN end ] start
							 */
		
							currentVirtualComponent = "tAggregateRow_2";
		
							currentComponent = "tAggregateRow_2_AGGIN";
		
						} // G_AggR_600
		
						ok_Hash.put("tAggregateRow_2_AGGIN", true);
						end_Hash.put("tAggregateRow_2_AGGIN",
								System.currentTimeMillis());
		
						/**
						 * [tAggregateRow_2_AGGIN end ] stop
						 */
		
						/**
						 * [tLogRow_1 end ] start
						 */
		
						currentComponent = "tLogRow_1";
		
						// ////
						// ////
						globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);
		
						// /////////////////////
		
						ok_Hash.put("tLogRow_1", true);
						end_Hash.put("tLogRow_1", System.currentTimeMillis());
		
						/**
						 * [tLogRow_1 end ] stop
						 */
		
						/**
						 * [tMongoDBOutput_1 end ] start
						 */
		
						currentComponent = "tMongoDBOutput_1";
		
						if (mongo_tMongoDBOutput_1 != null) {
		
							mongo_tMongoDBOutput_1.close();
		
						}
						resourceMap.put("finish_tMongoDBOutput_1", true);
		
						globalMap.put("tMongoDBOutput_1_NB_LINE",
								nb_line_tMongoDBOutput_1);
		
						ok_Hash.put("tMongoDBOutput_1", true);
						end_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());
		
						/**
						 * [tMongoDBOutput_1 end ] stop
						 */
		
					}// end the resume
		
				} catch (java.lang.Exception e) {
		
					TalendException te = new TalendException(e, currentComponent,
							globalMap);
		
					te.setVirtualComponentName(currentVirtualComponent);
		
					throw te;
				} catch (java.lang.Error error) {
		
					throw error;
				} finally {
		
					// free memory for "tAggregateRow_2_AGGIN"
					globalMap.remove("tAggregateRow_2");
		
					try {
		
						/**
						 * [tFileInputExcel_1 finally ] start
						 */
		
						currentComponent = "tFileInputExcel_1";
		
						/**
						 * [tFileInputExcel_1 finally ] stop
						 */
		
						/**
						 * [tMap_1 finally ] start
						 */
		
						currentComponent = "tMap_1";
		
						/**
						 * [tMap_1 finally ] stop
						 */
		
						/**
						 * [tFilterRow_1 finally ] start
						 */
		
						currentComponent = "tFilterRow_1";
		
						/**
						 * [tFilterRow_1 finally ] stop
						 */
		
						/**
						 * [tReplace_1 finally ] start
						 */
		
						currentComponent = "tReplace_1";
		
						/**
						 * [tReplace_1 finally ] stop
						 */
		
						/**
						 * [tMap_2 finally ] start
						 */
		
						currentComponent = "tMap_2";
		
						/**
						 * [tMap_2 finally ] stop
						 */
		
						/**
						 * [tAggregateRow_2_AGGOUT finally ] start
						 */
		
						currentVirtualComponent = "tAggregateRow_2";
		
						currentComponent = "tAggregateRow_2_AGGOUT";
		
						/**
						 * [tAggregateRow_2_AGGOUT finally ] stop
						 */
		
						/**
						 * [tAggregateRow_2_AGGIN finally ] start
						 */
		
						currentVirtualComponent = "tAggregateRow_2";
		
						currentComponent = "tAggregateRow_2_AGGIN";
		
						/**
						 * [tAggregateRow_2_AGGIN finally ] stop
						 */
		
						/**
						 * [tLogRow_1 finally ] start
						 */
		
						currentComponent = "tLogRow_1";
		
						/**
						 * [tLogRow_1 finally ] stop
						 */
		
						/**
						 * [tMongoDBOutput_1 finally ] start
						 */
		
						currentComponent = "tMongoDBOutput_1";
		
						if (resourceMap.get("finish_tMongoDBOutput_1") == null) {
							if (resourceMap.get("mongo_tMongoDBOutput_1") != null) {
		
								((com.mongodb.Mongo) resourceMap
										.get("mongo_tMongoDBOutput_1")).close();
		
							}
						}
		
						/**
						 * [tMongoDBOutput_1 finally ] stop
						 */
		
					} catch (java.lang.Exception e) {
						// ignore
					} catch (java.lang.Error error) {
						// ignore
					}
					resourceMap = null;
				}
		
				globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
			}
		
			public String resuming_logs_dir_path = null;
			public String resuming_checkpoint_path = null;
			public String parent_part_launcher = null;
			private String resumeEntryMethodName = null;
			private boolean globalResumeTicket = false;
		
			public boolean watch = false;
			// portStats is null, it means don't execute the statistics
			public Integer portStats = null;
			public int portTraces = 4334;
			public String clientHost;
			public String defaultClientHost = "localhost";
			public String contextStr = "Default";
			public boolean isDefaultContext = true;
			public String pid = "0";
			public String rootPid = null;
			public String fatherPid = null;
			public String fatherNode = null;
			public long startTime = 0;
			public boolean isChildJob = false;
			public String log4jLevel = "";
		
			private boolean execStat = true;
		
			private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
				protected java.util.Map<String, String> initialValue() {
					java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
					threadRunResultMap.put("errorCode", null);
					threadRunResultMap.put("status", "");
					return threadRunResultMap;
				};
			};
		
			private java.util.Properties context_param = new java.util.Properties();
			public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();
		
			public String status = "";
		
			public static void main(String[] args) {
				final Trans1 Trans1Class = new Trans1();
		
				int exitCode = Trans1Class.runJobInTOS(args);
		
				System.exit(exitCode);
			}
		
			public String[][] runJob(String[] args) {
		
				int exitCode = runJobInTOS(args);
				String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };
		
				return bufferValue;
			}
		
			public boolean hastBufferOutputComponent() {
				boolean hastBufferOutput = false;
		
				return hastBufferOutput;
			}
		
			public int runJobInTOS(String[] args) {
				// reset status
				status = "";
		
				String lastStr = "";
				for (String arg : args) {
					if (arg.equalsIgnoreCase("--context_param")) {
						lastStr = arg;
					} else if (lastStr.equals("")) {
						evalParam(arg);
					} else {
						evalParam(lastStr + " " + arg);
						lastStr = "";
					}
				}
		
				if (clientHost == null) {
					clientHost = defaultClientHost;
				}
		
				if (pid == null || "0".equals(pid)) {
					pid = TalendString.getAsciiRandomString(6);
				}
		
				if (rootPid == null) {
					rootPid = pid;
				}
				if (fatherPid == null) {
					fatherPid = pid;
				} else {
					isChildJob = true;
				}
		
				try {
					// call job/subjob with an existing context, like:
					// --context=production. if without this parameter, there will use
					// the default context instead.
					java.io.InputStream inContext = Trans1.class.getClassLoader()
							.getResourceAsStream(
									"beproject/trans1_0_1/contexts/" + contextStr
											+ ".properties");
					if (isDefaultContext && inContext == null) {
		
					} else {
						if (inContext != null) {
							// defaultProps is in order to keep the original context
							// value
							defaultProps.load(inContext);
							inContext.close();
							context = new ContextProperties(defaultProps);
						} else {
							// print info and job continue to run, for case:
							// context_param is not empty.
							System.err.println("Could not find the context "
									+ contextStr);
						}
					}
		
					if (!context_param.isEmpty()) {
						context.putAll(context_param);
					}
				} catch (java.io.IOException ie) {
					System.err.println("Could not load context " + contextStr);
					ie.printStackTrace();
				}
		
				// get context value from parent directly
				if (parentContextMap != null && !parentContextMap.isEmpty()) {
				}
		
				// Resume: init the resumeUtil
				resumeEntryMethodName = ResumeUtil
						.getResumeEntryMethodName(resuming_checkpoint_path);
				resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
				resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
						jobName, contextStr, jobVersion);
		
				List<String> parametersToEncrypt = new java.util.ArrayList<String>();
				// Resume: jobStart
				resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
						parent_part_launcher, Thread.currentThread().getId() + "", "",
						"", "", "",
						resumeUtil.convertToJsonText(context, parametersToEncrypt));
		
				java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
				globalMap.put("concurrentHashMap", concurrentHashMap);
		
				long startUsedMemory = Runtime.getRuntime().totalMemory()
						- Runtime.getRuntime().freeMemory();
				long endUsedMemory = 0;
				long end = 0;
		
				startTime = System.currentTimeMillis();
		
				this.globalResumeTicket = true;// to run tPreJob
		
				this.globalResumeTicket = false;// to run others jobs
		
				try {
					errorCode = null;
					tFileInputExcel_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (TalendException e_tFileInputExcel_1) {
					globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);
		
					e_tFileInputExcel_1.printStackTrace();
		
				}
		
				this.globalResumeTicket = true;// to run tPostJob
		
				end = System.currentTimeMillis();
		
				if (watch) {
					System.out.println((end - startTime) + " milliseconds");
				}
		
				endUsedMemory = Runtime.getRuntime().totalMemory()
						- Runtime.getRuntime().freeMemory();
				if (false) {
					System.out.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Trans1");
				}
		
				int returnCode = 0;
				if (errorCode == null) {
					returnCode = status != null && status.equals("failure") ? 1 : 0;
				} else {
					returnCode = errorCode.intValue();
				}
				resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
						Thread.currentThread().getId() + "", "", "" + returnCode, "",
						"", "");
		
				return returnCode;
		
			}
		
			// only for OSGi env
			public void destroy() {
		
			}
		
			private java.util.Map<String, Object> getSharedConnections4REST() {
				java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		
				return connections;
			}
		
			private void evalParam(String arg) {
				if (arg.startsWith("--resuming_logs_dir_path")) {
					resuming_logs_dir_path = arg.substring(25);
				} else if (arg.startsWith("--resuming_checkpoint_path")) {
					resuming_checkpoint_path = arg.substring(27);
				} else if (arg.startsWith("--parent_part_launcher")) {
					parent_part_launcher = arg.substring(23);
				} else if (arg.startsWith("--watch")) {
					watch = true;
				} else if (arg.startsWith("--stat_port=")) {
					String portStatsStr = arg.substring(12);
					if (portStatsStr != null && !portStatsStr.equals("null")) {
						portStats = Integer.parseInt(portStatsStr);
					}
				} else if (arg.startsWith("--trace_port=")) {
					portTraces = Integer.parseInt(arg.substring(13));
				} else if (arg.startsWith("--client_host=")) {
					clientHost = arg.substring(14);
				} else if (arg.startsWith("--context=")) {
					contextStr = arg.substring(10);
					isDefaultContext = false;
				} else if (arg.startsWith("--father_pid=")) {
					fatherPid = arg.substring(13);
				} else if (arg.startsWith("--root_pid=")) {
					rootPid = arg.substring(11);
				} else if (arg.startsWith("--father_node=")) {
					fatherNode = arg.substring(14);
				} else if (arg.startsWith("--pid=")) {
					pid = arg.substring(6);
				} else if (arg.startsWith("--context_param")) {
					String keyValue = arg.substring(16);
					int index = -1;
					if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
						if (fatherPid == null) {
							context_param.put(keyValue.substring(0, index),
									replaceEscapeChars(keyValue.substring(index + 1)));
						} else { // the subjob won't escape the especial chars
							context_param.put(keyValue.substring(0, index),
									keyValue.substring(index + 1));
						}
					}
				} else if (arg.startsWith("--log4jLevel=")) {
					log4jLevel = arg.substring(13);
				}
		
			}
		
			private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
					{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
					{ "\\t", "\t" } };
		
			private String replaceEscapeChars(String keyValue) {
		
				if (keyValue == null || ("").equals(keyValue.trim())) {
					return keyValue;
				}
		
				StringBuilder result = new StringBuilder();
				int currIndex = 0;
				while (currIndex < keyValue.length()) {
					int index = -1;
					// judege if the left string includes escape chars
					for (String[] strArray : escapeChars) {
						index = keyValue.indexOf(strArray[0], currIndex);
						if (index >= 0) {
		
							result.append(keyValue.substring(currIndex,
									index + strArray[0].length()).replace(strArray[0],
									strArray[1]));
							currIndex = index + strArray[0].length();
							break;
						}
					}
					// if the left string doesn't include escape chars, append the left
					// into the result
					if (index < 0) {
						result.append(keyValue.substring(currIndex));
						currIndex = currIndex + keyValue.length();
					}
				}
		
				return result.toString();
			}
		
			public Integer getErrorCode() {
				return errorCode;
			}
		
			public String getStatus() {
				return status;
			}
		
			ResumeUtil resumeUtil = null;
		}
		/************************************************************************************************
		 * 113219 characters generated by Talend Open Studio for Big Data on the 27
		 * April, 2016 12:08:04 AM IST
		 ************************************************************************************************/
		
	}
}